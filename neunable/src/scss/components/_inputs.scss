.input{
  margin: .4rem .3rem;
  padding: .2rem;
  outline: 0;
  min-height: 2rem;
  min-width: 4rem;
  font-size: 1rem;
  font-weight: bold;
  color: inherit;
  background-color: inherit;
  border: 0;
  border-color: #41353520 !important;
  border-radius: .5rem;
  transition: box-shadow .05s ease;
  box-shadow: inset -2px -2px 4px #ffffff, inset 2px 2px 4px #bfc5cc;

  &.input-push:focus{
      outline: 0;
  }
  &.input-bump:focus{
      outline: 0;
  }
}
// }

.input-radio{
  width: 2.5rem;
  height: 2.5rem;
  // position: relative;
  border-radius: .2rem;
  background: inherit;
  margin: .4rem;
  // padding: 1rem;
  display: flex;
  justify-content: center;
  align-items: center;
  border: .05rem solid;
  box-shadow: 2px 2px 4px #bfc5cc, -2px -2px 4px #ffffff;
  > .checkmark{
    width: calc(100% - 6px);
    height: calc(100% - 6px);
    border-radius: .2rem;
    background-color: lightsalmon;
    display: none;
  }
  &input:checked + .checkmark{
    display: inline-block;
  }



}
input[type="checkbox"],
input[type="radio"]
{
  &.input{
    position: relative;
    transition: box-shadow .05s ease;
    display: none;
  }
  &:checked + .checkmark{
    display: inline-block;
  }
  &:focus{
    outline: 0;
  }
}
input[type="range"]
{
  &.input{
    margin: auto;
    -webkit-appearance: none;
    postion: relative;
    overflow: hidden;
    min-height: 3rem;
    min-width: 4rem;
    height: auto;
    width: auto;
    background: inherit;
    box-shadow: none;
    transform: translate(0,25%);
    cursor: pointer;
    &::-webkit-slider-runnable-track {
      -webkit-appearance: none;
      height: 1rem;
      border-radius: .5rem;
      background: #00000020;
      // box-shadow: 2px 2px 4px #bfc5cc, -2px -2px 4px #ffffff;
    }
    &::-webkit-slider-runnable-progress {
      -webkit-appearance: none;
      height: 1rem;
      border-radius: .5rem;
      background-color: #ffffff50;
    }
    &::-webkit-slider-thumb {
      -webkit-appearance: none;
      width: .8rem;
      height: 1.8rem;
      transform: translateY(-15%);
      background-color: inherit;
      border: .2rem solid;
      border-radius: .2rem;
      // box-shadow: 2px 2px 4px #bfc5cc, -2px -2px 4px #ffffff;
    }
    &::-moz-range-track {
      height: 1rem;
      border-radius: .5rem;
      background: #00000020;
      // box-shadow: 2px 2px 4px #bfc5cc, -2px -2px 4px #ffffff;
    }
    &::-moz-range-progress {
      height: 1rem;
      border-radius: .5rem;
      background-color: #ffffff60;
    }
    &::-moz-range-thumb {
      -webkit-appearance: none;
      width: .8rem;
      height: 1.8rem;
      background: inherit;
      border: .2rem solid;
      border-radius: .2rem;
      // box-shadow: 2px 2px 4px #bfc5cc, -2px -2px 4px #ffffff;
    }
    &::-ms-fill-lower {
      background-color: #ffffff;
    }
    &::-ms-thumb {
      -webkit-appearance: none;
      width: .8rem;
      height: 1.5rem;
      background: inherit;
      border: .2rem solid;
      border: 0;
      border-radius: .2rem;
    }
    &::-ms-fill-lower {
      background-color: #000000;
    }
  }

}

// for file button
input[type="file"]{
  &.input{
    &::file-selector-button,
    &::-webkit-file-upload-button
    {
      background: inherit;
      border: 0;
      // border-radius: 0;
      // border: 2px solid #6c5ce7;
      padding: .2em .4em;
      border-radius: .2em;
      // background-color: #a29bfe;
      transition: .4s;
    }
    &::file-selector-button:hover{
      background-color: #00000020;
    }
    // transition: .4s;
    &::-ms-browse {}
  }
}

input[type="button"]:disabled,
input[type="submit"]:disabled,
input[type="reset"]:disabled,
input[type="date"]:disabled,
input[type="datetime-local"]:disabled,
input[type="email"]:disabled,
input[type="month"]:disabled,
input[type="number"]:disabled,
input[type="password"]:disabled,
input[type="search"]:disabled,
input[type="tel"]:disabled,
input[type="text"]:disabled,
input[type="time"]:disabled,
input[type="url"]:disabled,
input[type="week"]:disabled
input[type="file"]:disabled
{

  &.input{
    margin: .4rem .3rem;
    padding: .2rem;
    color: inherit;
    background-color: inherit;
    border: 0;
    border-radius: .5rem;
    box-shadow: none;
    background: #00000020;
    border-color: #41353520 !important;
    cursor: auto;
  }
}

@mixin set_input_button_styling($map, $keys){
    @each $keymap, $valuemap in $map{
        .input-#{$keymap}{
            content: '';
            @each $key in $keys{
                @if $key == box-shadow {
                    #{$key}:inset -2px -2px 4px map-get(map-get($valuemap, $key), lighter), inset 2px 2px 4px map-get(map-get($valuemap, $key), darker);
                    &.input-pull{
                        #{$key}: 2px 2px 4px  map-get(map-get($valuemap, $key), darker), -2px -2px 4px map-get(map-get($valuemap, $key), lighter);
                    }
                    // &:active{
                    //     #{$key}: 2px 2px 4px map-get(map-get($valuemap, $key), modd), -2px -2px 4px map-get(map-get($valuemap, $key), modl);
                    // }
                    // &.focus:focus{
                    //     outline: 0;
                    //     #{$key}: 2px 2px 4px map-get(map-get($valuemap, $key), modd), -2px -2px 4px map-get(map-get($valuemap, $key), modl);
                    // }
                    &.input-bump{
                        #{$key}: 2px 2px 4px map-get(map-get($valuemap, $key), darker), -2px -2px 4px map-get(map-get($valuemap, $key), lighter), 2px 2px 4px map-get(map-get($valuemap, $key), darker) inset, -2px -2px 4px map-get(map-get($valuemap, $key), lighter) inset;
                    }
                }
            }
        }
    }

}

@mixin set_input_typing_styling($map, $keys){
  @each $keymap, $valuemap in $map{
      &.input-#{$keymap}{
          content: '';
          @each $key in $keys{
              @if $key == box-shadow {
                  #{$key}: 2px 2px 4px map-get(map-get($valuemap, $key), darker), -2px -2px 4px map-get(map-get($valuemap, $key), lighter);
                  &.input-push{
                      #{$key}: 2px 2px 4px  map-get(map-get($valuemap, $key), darker) inset, -2px -2px 4px map-get(map-get($valuemap, $key), lighter) inset;
                  }
                  // &:active{
                  //     #{$key}: 2px 2px 4px map-get(map-get($valuemap, $key), modd), -2px -2px 4px map-get(map-get($valuemap, $key), modl);
                  // }
                  // &.focus:focus{
                  //     outline: 0;
                  //     #{$key}: 2px 2px 4px map-get(map-get($valuemap, $key), modd), -2px -2px 4px map-get(map-get($valuemap, $key), modl);
                  // }
                  &.input-bump{
                      #{$key}: 2px 2px 4px map-get(map-get($valuemap, $key), darker), -2px -2px 4px map-get(map-get($valuemap, $key), lighter), 2px 2px 4px map-get(map-get($valuemap, $key), darker) inset, -2px -2px 4px map-get(map-get($valuemap, $key), lighter) inset;
                  }
              }
          }
      }
  }
  // }
}

@mixin set_input_check_styling($map, $keys){
  @each $keymap, $valuemap in $map{
      &.input-#{$keymap}{
          content: '';
          @each $key in $keys{
              @if $key == box-shadow {
                  #{$key}: 2px 2px 4px map-get(map-get($valuemap, $key), darker), -2px -2px 4px map-get(map-get($valuemap, $key), lighter);
                  &.input-push{
                      #{$key}: 2px 2px 4px  map-get(map-get($valuemap, $key), darker) inset, -2px -2px 4px map-get(map-get($valuemap, $key), lighter) inset;
                  }
                  // &:active{
                  //     #{$key}: 2px 2px 4px map-get(map-get($valuemap, $key), modd), -2px -2px 4px map-get(map-get($valuemap, $key), modl);
                  // }
                  // &.focus:focus{
                  //     outline: 0;
                  //     #{$key}: 2px 2px 4px map-get(map-get($valuemap, $key), modd), -2px -2px 4px map-get(map-get($valuemap, $key), modl);
                  // }
                  &.input-bump{
                      #{$key}: 2px 2px 4px map-get(map-get($valuemap, $key), darker), -2px -2px 4px map-get(map-get($valuemap, $key), lighter), 2px 2px 4px map-get(map-get($valuemap, $key), darker) inset, -2px -2px 4px map-get(map-get($valuemap, $key), lighter) inset;
                  }
              }
          }
      }
  }
  // }
}
