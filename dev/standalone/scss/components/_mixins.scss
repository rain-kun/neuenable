// mixin for generating singletons
@mixin set_neumorph_singletons($map, $props, $start: '', $imp: ''){
    // $map gets the keys and values, $bgs, $texts are the css property component will get
        @each $keymap, $valuemap in $map{
            .#{$start}#{$keymap}{
                @if $imp == ''{
                    @each $p in $props{
                    #{$p}: map-get($valuemap, $p);
                }    
            }
            @else{
                @each $p in $props{
                    @if map-get($valuemap, $p){
                        #{$p}: map-get($valuemap, $p) $imp;
                    }
                }
            }
        }
    }
}

@mixin set_neumorph_grad($map, $props:'', $imp: ''){
    // $map gets the keys and values, $bgs, $texts are the css property component will get
    @each $keymap, $valuemap in $map{
        @each $angle, $anglemap in $angles{
            .#{$angle}-#{$keymap}{
                // @if $imp == ''{
                    &.concave{
                        background: linear-gradient(map-get($anglemap, ang), map-get($valuemap, start), map-get($valuemap, end)) $imp;
                    }
                    &.convex{
                        background: linear-gradient(map-get($anglemap, ang), map-get($valuemap, end), map-get($valuemap, start)) $imp;
                    }
                    // @each $p in $props{
                    //     @if $p == 'bump'{
                    //         #{$p}: linear-gradient(map-get($valuemap, start));
                    //     }
                    // }    
                // }
                // @else{
                //     @if map-get($valuemap, $p){
                //         .press{
                //             background: linear-gradient(map-get($anglemap, ang), map-get($valuemap, start), map-get($valuemap, end)) $imp;
                //         }
                //         .bump{
                //             background: linear-gradient(map-get($anglemap, ang), map-get($valuemap, end), map-get($valuemap, start)) $imp;
                //         }
                //     }
                //     // @each $p in $props{
                            
                //     //         #{$p}: map-get($valuemap, $p) $imp;
                //     //     }
                // }
            }
        }
    }
}

// mixin for generating a type of animations on certain events
// @mixin set_neumorph_animation($map, $keys){
//     @each $keymap, $valuemap in $map{
//         // seperating the first level keys and values
//         @each $angle, $values in $angles{
//             // @each $ang, $values in $angles{
//                 // @if $angle == $ang{
//                     @each $event in $events{
//                         @each $effect in $effects{
//                             @keyframes #{$angle}-#{$effect}{
//                                 0%{
//                                     height: 3rem;
//                                     width: 6rem;
//                                     box-shadow: map-get($values, 'x') 10px 2px map-get(map-get($valuemap, box-shadow), darker), map-get($values, 'y') 10px 2px map-get(map-get($valuemap, box-shadow), lighter);
//                                 }
//                                 100%{
//                                     height:  3rem;
//                                     width: 6rem;
//                                     box-shadow: map-get($values, 'x') 10px 2px map-get(map-get($valuemap, box-shadow), darker) inset, map-get($values, 'y') 10px 2px map-get(map-get($valuemap, box-shadow), lighter) inset;
//                                 }
//                             }
//                             @keyframes #{$angle}-un-#{$effect}{
//                                 0%{
//                                     height: 3rem;
//                                     width: 6rem;
//                                     box-shadow: map-get($values, 'x') 10px 2px map-get(map-get($valuemap, box-shadow), darker), map-get($values, 'y') 10px 2px map-get(map-get($valuemap, box-shadow), lighter);
//                                 }
//                                 100%{
//                                     height:  3rem;
//                                     width: 6rem;
//                                     box-shadow: map-get($values, 'x') 10px 2px map-get(map-get($valuemap, box-shadow), darker) inset, map-get($values, 'y') 10px 2px map-get(map-get($valuemap, box-shadow), lighter) inset;
//                                 }
//                             }
//                         }
//                     }
//                 // }
//             // }
//         }
//     }
// }

// mixin for generating a type of components with certain action or not
@mixin set_neumorph_element($map, $keys, $eff: false, $imp: ''){
    // $map for the values and keys, $keys are the css property component will get, $eff tells if it has events or not
    @each $keymap, $valuemap in $map{
        // seperating the first level keys and values
        @each $angle, $anglemap in $angles{
            // $angle represents the angle of light source
            .#{$angle}-#{$keymap}{
                @each $key in $keys{
                    @if $key == box-shadow {
                        // types
                        #{$key}: map-get($anglemap, 'x') map-get($anglemap, 'm') map-get(map-get($valuemap, $key), darker), map-get($anglemap, 'y') map-get($anglemap, 'm') map-get(map-get($valuemap, $key), lighter);
                        &.s1{
                            #{$key}:inset map-get($anglemap, 'x') map-get($anglemap, 'm') map-get(map-get($valuemap, $key), darker),inset map-get($anglemap, 'y') map-get($anglemap, 'm') map-get(map-get($valuemap, $key), lighter);
                        }
                        &.s2{
                            #{$key}: map-get($anglemap, 'x') map-get($anglemap, 'm') map-get(map-get($valuemap, $key), darker), map-get($anglemap, 'y') map-get($anglemap, 'm') map-get(map-get($valuemap, $key), lighter),inset map-get($anglemap, 'x') map-get($anglemap, 'm') map-get(map-get($valuemap, $key), darker),inset map-get($anglemap, 'y') map-get($anglemap, 'm') map-get(map-get($valuemap, $key), lighter);
                        }
                    }
                    // if created gradient
                    // @else if $key == background {
                    //     @if $imp == ''{
                    //         #{$key}: map-get(map-get($valuemap, $key), background);
                    //         &.press{
                    //             #{$key}: linear-gradient(map-get($anglemap, ang), map-get(map-get($valuemap, $key), start), map-get(map-get($valuemap, $key), end)) $imp;
                    //         }
                    //         &.bump{
                    //             #{$key}: linear-gradient(map-get($anglemap, ang), map-get(map-get($valuemap, $key), end), map-get(map-get($valuemap, $key), start)) $imp;
                    //         }
                    //     }
                    //     @else{
                    //         @if map-get($valuemap, $key){
                    //             #{$key}: map-get(map-get($valuemap, $key), background) $imp;
                    //             &.press{
                    //                 #{$key}: linear-gradient(map-get($anglemap, ang), map-get(map-get($valuemap, $key), start), map-get(map-get($valuemap, $key), end)) $imp;
                    //             }
                    //             &.bump{
                    //                 #{$key}: linear-gradient(map-get($anglemap, ang), map-get(map-get($valuemap, $key), end), map-get(map-get($valuemap, $key), start)) $imp;
                    //             }
                    //         }
                    //     }
                    // }
                    @else{
                        @if $imp == ''{
                            #{$key}: map-get($valuemap, $key);
                        }
                        @else{
                            @if map-get($valuemap, $key){
                                #{$key}: map-get($valuemap, $key) $imp;
                            }
                        }
                    }
                }
                // apply the effects if true
                @if $eff == true {
                    @each $ang, $values in $angles{
                        @if $angle == $ang{
                            @each $event in $events{
                                @each $effect in $effects{
                                    &.#{$event}:#{$event}{
                                        animation: #{$ang}-#{$effect} 50ms forwards ease-in-out;
                                    }
                                    &.#{$event}:not(:#{$event}){
                                        animation: #{$ang}-un-#{$effect} 50ms forwards ease-in-out;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}