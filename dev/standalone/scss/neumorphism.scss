// types of components (this library offers by default)
// DESCRIPTION
$base: (
    'dark': ('background': #24282d, 'box-shadow':('darker': #00000020, 'lighter': #ffffff08), 'border-color': #24282d),
    'light': ('background': #ebecf0, 'box-shadow':('darker': #00000015, 'lighter': #ffffff92), 'border-color': #ebecf0),
    'blue': ('background': #017dd3, 'box-shadow':('darker': #00000020, 'lighter': #ffffff20), 'border-color': #017dd3), 
    'green': ('background': #256668, 'box-shadow':('darker': #00000020, 'lighter': #ffffff20), 'border-color': #256668),
    'red': ('background': #b91715, 'box-shadow':('darker': #00000025, 'lighter': #ffffff25), 'border-color': #b91715),
    'yellow': ('background': #ffcf00, 'box-shadow':('darker': #00000020, 'lighter': #ffffff98), 'border-color': #ffcf00)
    );
// type of shapes
//noclass, s1, s2

// angles or direction of the light source (this library offers by default)
// four default angles are given for light source
// top-right
// bottom-right
// top-left
// bottom-left
$angles:(
    'tr':('x': -4px 4px, 'y': 4px -4px),
    'br':('x': -4px -4px, 'y': 4px 4px),
    'tl':('x': 4px 4px, 'y': -4px -4px),
    'bl':('x': 4px -4px, 'y': -4px 4px)
    );

// default colors
// twelve default colors are given, six for background or components and six for text or icon 
$colors: (
    'dark': ('color': #999, 'background': #24282d),
    'light': ('color': #ececec, 'background': #ebecf0),
    'blue': ('color': #80a3ff, 'background': #017dd3), 
    'green': ('color': green, 'background': #256668),
    'red': ('color': #ff0d45, 'background': #b91715),
    'yellow': ('color': #ffcf00, 'background': #ffcf00)
    );

// default curves
$curves: (
    'curve-1': ('border-radius': 10px),
    'curve-2': ('border-radius': 20px),
    'curve-3': ('border-radius': 30px), 
    'curve-4': ('border-radius': 40px),
    'curve-5': ('border-radius': 50px),
    'rounded': ('border-radius': 50%, 'min-height': 2rem, 'min-width': 2rem)
    );

$borders: (
    'border-1': ('border': .2rem solid),
    'border-2': ('border': .3rem solid),
    'border-3': ('border': .4rem solid), 
    'border-4': ('border': .5rem solid),
    'border-5': ('border': .6rem solid)
    );

// default props for background components
$bg-p: 'background';
// default props for text components
$text-p: 'color';
// default props for curves
$curve-p: 'border-radius' 'min-height' 'min-width';
// default props for borders
$border-p: 'border';
// default props for components
$base-p: 'background' 'box-shadow' 'border-color';
// default events (this library offers)
$events: 'active' 'focus' 'hover';
// default effects
$effects: 'push';
$effect-p: 'box-shadow';

.btn{
    border: 0px;
    // border-radius: 0%;
    min-height: 3rem;
    min-width: 6rem;
    // margin: 1rem;
    font-weight: bold;
    font-size: 1rem;
    // &:hover{
    //     outline: none !important;
    //     // box-shadow: none;
    // }
    // &:active{
    //     outline: none !important;
    //     // box-shadow: none;
    // }
    &:focus{
        outline: none !important;
        box-shadow: 4px 4px 10px 2px rgba(0, 0, 0, 0.25), -4px -4px 10px rgba(255, 255, 255, 0.08);
    }
}

// @mixin setup($map, $keys){
//     @each $keymap, $valuemap in $map{
//         .#{$keymap}-type{
//             @each $key in $keys{
//                 @if(#{$key} != box-shadow){
//                     #{$key}: map-get($valuemap, $key);
//                 }
//             }
//         }
//     }
// }

// mixin for generating singletons
@mixin set_neumorph_singletons($map, $props, $start: '', $imp: ''){
    // $map gets the keys and values, $bgs, $texts are the css property component will get
    @each $keymap, $valuemap in $map{
        .#{$start}#{$keymap}{
            @if $imp == ''{
                @each $p in $props{
                    #{$p}: map-get($valuemap, $p);
                }    
            }
            @else{
                @each $p in $props{
                    #{$p}: map-get($valuemap, $p) $imp;
                }
            }
        }
    }
}

// mixin for generating a type of animations on certain events
// @mixin set_neumorph_animation($map, $keys){
//     @each $keymap, $valuemap in $map{
//         // seperating the first level keys and values
//         @each $angle, $values in $angles{
//             // @each $ang, $values in $angles{
//                 // @if $angle == $ang{
//                     @each $event in $events{
//                         @each $effect in $effects{
//                             @keyframes #{$angle}-#{$effect}{
//                                 0%{
//                                     height: 3rem;
//                                     width: 6rem;
//                                     box-shadow: map-get($values, 'x') 10px 2px map-get(map-get($valuemap, box-shadow), darker), map-get($values, 'y') 10px 2px map-get(map-get($valuemap, box-shadow), lighter);
//                                 }
//                                 100%{
//                                     height:  3rem;
//                                     width: 6rem;
//                                     box-shadow: map-get($values, 'x') 10px 2px map-get(map-get($valuemap, box-shadow), darker) inset, map-get($values, 'y') 10px 2px map-get(map-get($valuemap, box-shadow), lighter) inset;
//                                 }
//                             }
//                             @keyframes #{$angle}-un-#{$effect}{
//                                 0%{
//                                     height: 3rem;
//                                     width: 6rem;
//                                     box-shadow: map-get($values, 'x') 10px 2px map-get(map-get($valuemap, box-shadow), darker), map-get($values, 'y') 10px 2px map-get(map-get($valuemap, box-shadow), lighter);
//                                 }
//                                 100%{
//                                     height:  3rem;
//                                     width: 6rem;
//                                     box-shadow: map-get($values, 'x') 10px 2px map-get(map-get($valuemap, box-shadow), darker) inset, map-get($values, 'y') 10px 2px map-get(map-get($valuemap, box-shadow), lighter) inset;
//                                 }
//                             }
//                         }
//                     }
//                 // }
//             // }
//         }
//     }
// }

// mixin for generating a type of components with certain action or not
@mixin set_neumorph_element($map, $keys, $eff: false, $imp: ''){
    // $map for the values and keys, $keys are the css property component will get, $eff tells if it has events or not
    @each $keymap, $valuemap in $map{
        // seperating the first level keys and values
        @each $angle, $values in $angles{
            // $angle represents the angle of light source
            .#{$angle}-#{$keymap}{
                @each $key in $keys{
                    @if $key == box-shadow {
                        #{$key}: map-get($values, 'x') 8px 2px map-get(map-get($valuemap, $key), darker), map-get($values, 'y') 8px 2px map-get(map-get($valuemap, $key), lighter);
                        &.s1{
                            #{$key}:inset map-get($values, 'x') 8px map-get(map-get($valuemap, $key), darker),inset map-get($values, 'y') 8px 2px map-get(map-get($valuemap, $key), lighter);
                        }
                        &.s2{
                            #{$key}: map-get($values, 'x') 8px 2px map-get(map-get($valuemap, $key), darker), map-get($values, 'y') 8px 2px map-get(map-get($valuemap, $key), lighter),inset map-get($values, 'x') 4px map-get(map-get($valuemap, $key), darker),inset map-get($values, 'y') 4px map-get(map-get($valuemap, $key), lighter);
                        }
                    }
                    @else{
                        @if $imp == ''{
                            #{$key}: map-get($valuemap, $key);
                        }
                        @else{
                            #{$key}: map-get($valuemap, $key) $imp;
                        }
                    }
                }
                // apply the effects if true
                @if $eff == true {
                    @each $ang, $values in $angles{
                        @if $angle == $ang{
                            @each $event in $events{
                                @each $effect in $effects{
                                    &.#{$event}:#{$event}{
                                        animation: #{$ang}-#{$effect} 50ms forwards ease-in-out;
                                    }
                                    &.#{$event}:not(:#{$event}){
                                        animation: #{$ang}-un-#{$effect} 50ms forwards ease-in-out;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

@include set_neumorph_singletons($colors, $bg-p, 'bg-', ! important);
@include set_neumorph_singletons($colors, $text-p, 'text-');
@include set_neumorph_singletons($curves, $curve-p);
@include set_neumorph_singletons($borders, $border-p);
@include set_neumorph_element($base, $base-p, '', ! important);
// @include set_neumorph_animation($types, $effecttsprops);

// @include setup($test, $k);
/* Type 1 */
@keyframes tl-push{
    0%{
        height: 3rem;
        width: 6rem;
        box-shadow: 4px 4px 10px 2px rgba(0, 0, 0, 0.25), -4px -4px 10px rgba(255, 255, 255, 0.08);
    }
    100%{
        height:  3rem;
        width: 6rem;
        box-shadow: -4px -4px 15px 0px rgba(177, 177, 177, 0.03) inset, 4px 4px 10px 2px rgba(0, 0, 0, 0.12) inset;
    }
}

/* box-shadow: 4px 4px 10px 2px rgba(0, 0, 0, 0.25), -4px -4px 10px rgba(177, 177, 177, 0.08), -4px -4px 15px 0px rgba(177, 177, 177, 0.03) inset, 4px 4px 10px 2px rgba(0, 0, 0, 0.12) inset; */

@keyframes tl-un-push{
    0%{
        height:  3rem;
        width: 6rem;
        box-shadow: -4px -4px 15px rgba(177, 177, 177, 0.03) inset, 4px 4px 10px rgba(0, 0, 0, 0.12) inset;
    }
    100%{
        height: 3rem;
        width: 6rem;
        box-shadow: 4px 4px 10px 2px rgba(0, 0, 0, 0.25), -4px -4px 10px rgba(255, 255, 255, 0.08);
    }
}