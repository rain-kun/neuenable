// types of components (this library offers by default)
// DESCRIPTION
$types: (
    'dark': ('background': #24282d, 'box-shadow':('darker': #00000020, 'lighter': #ffffff08)),
    'light': ('background': #ebecf0, 'box-shadow':('darker': #00000015, 'lighter': #ffffff92)),
    'blue': ('background': #017dd3, 'box-shadow':('darker': #00000020, 'lighter': #ffffff20)), 
    'green': ('background': #256668, 'box-shadow':('darker': #00000020, 'lighter': #ffffff20)),
    'red': ('background': #b91715, 'box-shadow':('darker': #00000025, 'lighter': #ffffff25)),
    'yellow': ('background': #ffcf00, 'box-shadow':('darker': #00000020, 'lighter': #ffffff98))
    );

// angles or direction of the light source (this library offers by default)
// four default angles are given for light source
// top-right
// bottom-right
// top-left
// bottom-left
$angles:(
    'tr':('x': -4px 4px, 'y': 4px -4px),
    'br':('x': -4px -4px, 'y': 4px 4px),
    'tl':('x': 4px 4px, 'y': -4px -4px),
    'bl':('x': 4px -4px, 'y': -4px 4px)
    );

// default colors
// twelve default colors are given, six for background or components and six for text or icon 
$colors: (
    'dark': ('color': #999, 'background': #24282d),
    'light': ('color': #ececec, 'background': #ebecf0),
    'blue': ('color': #80a3ff, 'background': #017dd3), 
    'green': ('color': green, 'background': #256668),
    'red': ('color': #ff0d45, 'background': #b91715),
    'yellow': ('color': #ffcf00, 'background': #ffcf00)
    );

// default props for background components
$bgs: 'background';
// default props for text components
$texts: 'color';
$keys: 'primary' 'dark' 'light' 'success' 'danger' 'warning';
// default props for components
$props: 'background' 'box-shadow';
// default events (this library offers)
$events: 'active' 'focus' 'hover';

.btn{
    border: 0;
    border-radius: 20%;
    height: 3rem;
    width: 6rem;
    margin: 1rem;
    font-weight: bold;
    font-size: 1rem;
}

@mixin setup($map, $keys){
    @each $keymap, $valuemap in $map{
        .#{$keymap}-type{
            @each $key in $keys{
                @if(#{$key} != box-shadow){
                    #{$key}: map-get($valuemap, $key);
                }
            }
        }
    }
}

// mixin for generating a type of color related classes
@mixin set_neumorph_colors($map, $bgs, $texts){
    // $map gets the keys and values, $bgs, $texts are the css property component will get
    @each $keymap, $valuemap in $map{
        .bg-#{$keymap}{
            @each $bg in $bgs{
                #{$bg}: map-get($valuemap, $bg);
            }
        }
        .#{$keymap}{
            @each $text in $texts{
                #{$text}: map-get($valuemap, $text);
            }
        }
    }
}

// mixin for generating a type of animations on certain events
// @mixin set_neumorph_animation($map, $bgs, $texts){
//     @each $keymap, $valuemap in $map{
//         .bg-#{$keymap}{
//             @each $bg in $bgs{
//                 #{$bg}: map-get($valuemap, $bg);
//             }
//         }
//         .#{$keymap}{
//             @each $text in $texts{
//                 #{$text}: map-get($valuemap, $text);
//             }
//         }
//     }
// }

// mixin for generating a type of components with certain action or not
@mixin set_neumorph_element($map, $keys, $eff){
    // $map for the values and keys, $keys are the css property component will get, $eff tells if it has events or not
    @each $keymap, $valuemap in $map{
        // seperating the first level keys and values
        @each $angle, $values in $angles{
            // $angle represents the angle of light source
            .#{$angle}-#{$keymap}{
                @each $key in $keys{
                    @if $key == box-shadow {
                        #{$key}: map-get($values, 'x') 10px 2px map-get(map-get($valuemap, $key), darker), map-get($values, 'y') 10px 2px map-get(map-get($valuemap, $key), lighter);
                    }
                    @else{
                        #{$key}: map-get($valuemap, $key);
                    }
                }
                // apply the effects if true
                @if $eff == true {
                    @each $event in $events{
                        &.#{$event}:#{$event}{
                            animation: push 50ms forwards ease-in-out;
                        }
                        &.#{$event}:not(:#{$event}){
                            animation: pull 50ms forwards ease-in-out;
                        }
                    }
                }
            }
        }
    }
}

@include set_neumorph_colors($colors, $bgs, $texts);
@include set_neumorph_element($types, $props, true);


// @include setup($test, $k);
/* Type 1 */
@keyframes push{
    0%{
        height: 3rem;
        width: 6rem;
        box-shadow: 4px 4px 10px 2px rgba(0, 0, 0, 0.25), -4px -4px 10px rgba(255, 255, 255, 0.08);
    }
    100%{
        height:  3rem;
        width: 6rem;
        box-shadow: -4px -4px 15px 0px rgba(177, 177, 177, 0.03) inset, 4px 4px 10px 2px rgba(0, 0, 0, 0.12) inset;
    }
}

/* box-shadow: 4px 4px 10px 2px rgba(0, 0, 0, 0.25), -4px -4px 10px rgba(177, 177, 177, 0.08), -4px -4px 15px 0px rgba(177, 177, 177, 0.03) inset, 4px 4px 10px 2px rgba(0, 0, 0, 0.12) inset; */

@keyframes pull{
    0%{
        height:  3rem;
        width: 6rem;
        box-shadow: -4px -4px 15px rgba(177, 177, 177, 0.03) inset, 4px 4px 10px rgba(0, 0, 0, 0.12) inset;
    }
    100%{
        height: 3rem;
        width: 6rem;
        box-shadow: 4px 4px 10px 2px rgba(0, 0, 0, 0.25), -4px -4px 10px rgba(255, 255, 255, 0.08);
    }
}